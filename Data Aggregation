SELECT count(id) AS 'count'
FROM wizzard_deposits AS e;
#2
SELECT max(magic_wand_size) AS 'longest_magic_wand'
FROM wizzard_deposits;
#3
SELECT deposit_group,
max(magic_wand_size) AS 'longest_magic_wand'
FROM wizzard_deposits
GROUP BY deposit_group
ORDER BY longest_magic_wand ;
#4
SELECT deposit_group
FROM wizzard_deposits
GROUP BY deposit_group
ORDER BY avg(magic_wand_size) LIMIT 1 ;
#5
SELECT deposit_group,
SUM(`deposit_amount`) AS 'total_sum'
FROM `wizzard_deposits`
GROUP BY `deposit_group`
ORDER BY `total_sum`;
#6
SELECT deposit_group,
SUM(`deposit_amount`) AS 'total_sum'
FROM `wizzard_deposits`
WHERE `magic_wand_creator` LIKE 'Ollivander family'
GROUP BY `deposit_group`
ORDER BY `deposit_group`;
#7
SELECT deposit_group, SUM(`deposit_amount`) AS 'total_sum'
FROM `wizzard_deposits`
WHERE `magic_wand_creator` LIKE 'Ollivander family'
GROUP BY `deposit_group`
HAVING total_sum < 150000
ORDER BY `total_sum` DESC;
#8
SELECT `deposit_group`, `magic_wand_creator`, MIN(deposit_charge) AS `min_deposit_charge`
FROM `wizzard_deposits`
GROUP BY `deposit_group`, `magic_wand_creator`
ORDER BY `magic_wand_creator`, `deposit_group`;

#9
SELECT 
    CASE
        WHEN age <= 10 THEN '[0-10]'
        WHEN age <= 20 THEN '[11-20]'
        WHEN age <= 30 THEN '[21-30]'
        WHEN age <= 40 THEN '[31-40]'
        WHEN age <= 50 THEN '[41-50]'
        WHEN age <= 60 THEN '[51-60]'
        ELSE '[61+]'
    END AS 'age_group',
    COUNT(age) AS 'wizard_count'
    FROM `wizzard_deposits`
    GROUP BY `age_group`
    ORDER BY `age_group`;
    
#10
    SELECT DISTINCT LEFT(first_name, 1) AS 'first_letter'
    FROM `wizzard_deposits`
	WHERE `deposit_group` LIKE 'Troll Chest'
    GROUP BY `first_letter`
    ORDER BY  `first_letter`;
#11
SELECT `deposit_group`, `is_deposit_expired`,
AVG(deposit_interest) AS 'averge_interest'
FROM `wizzard_deposits`
WHERE `deposit_start_date` > '1985/01/01'
GROUP BY `is_deposit_expired`, `deposit_group`
ORDER BY `deposit_group` DESC, `is_deposit_expired`;

#12
SELECT SUM(diff.next) AS 'sum_difference'
FROM(
	SELECT `deposit_amount` -
		(SELECT `deposit_amount` 
		FROM `wizzard_deposits`
		WHERE `id` = wd.id + 1) AS next
	FROM `wizzard_deposits` AS wd) AS diff;

#13
SELECT department_id,
MIN(salary) AS 'minimum_salary'
FROM `employees`
WHERE `department_id` = '2' OR `department_id`= '5' OR `department_id` = '7' 
AND hire_date > '2000-01-01'
GROUP BY department_id
ORDER BY department_id;

#14
CREATE TABLE new_table AS
SELECT * FROM `employees` e
WHERE e.salary > 30000;

DELETE FROM new_table
WHERE manager_id = 42;

UPDATE new_table
SET salary = salary + 5000
WHERE `department_id` = 1;

SELECT hpe.department_id, AVG(hpe.salary) AS 'avg_salary'
FROM new_table hpe
GROUP BY hpe.department_id
ORDER BY hpe.department_id;

#15
SELECT department_id, MAX(salary) AS 'max_salary'
FROM `employees`
GROUP BY department_id
HAVING `max_salary` NOT BETWEEN 30000 AND 70000
ORDER BY department_id;

#16
SELECT count(salary) AS 'count'
FROM `employees`
WHERE `manager_id` IS NULL;

#17 РЕШЕНИЕ НА ВАНКАТА С ДЖОИН

SELECT 
    emp.department_id, MAX(emp.salary) AS third_highest_salary
FROM employees AS emp
	JOIN (SELECT e.department_id AS department_id, MAX(e.salary) AS max_salary
		  FROM employees AS e
          JOIN (SELECT e.department_id AS department_id, MAX(e.salary) AS max_salary
          FROM employees AS e
          GROUP BY e.department_id) AS first_max_salary 
    ON e.department_id = first_max_salary.department_id
    WHERE e.salary < first_max_salary.max_salary
    GROUP BY e.department_id) AS second_max_salary
ON emp.department_id = second_max_salary.department_id
WHERE emp.salary < second_max_salary.max_salary
GROUP BY emp.department_id
ORDER BY emp.department_id;


#17 второ решение 
SELECT 
    `department_id`,
    (SELECT DISTINCT
            `e2`.`salary`
        FROM
            `employees` AS `e2`
        WHERE
            `e2`.`department_id` = `e1`.`department_id`
        ORDER BY `e2`.`salary` DESC
        LIMIT 2 , 1) AS `third_highest_salary`
FROM
    `employees` AS `e1`
GROUP BY `department_id`
HAVING `third_highest_salary` IS NOT NULL;

#18
SELECT first_name, last_name, department_id
FROM `employees` AS hide
	JOIN(
    SELECT e.department_id, AVG(salary) AS average_salary
    FROM employees AS e
    GROUP BY e.department_id) average_sl
WHERE average_salary < salary
GROUP BY hide.department_id
ORDER BY hide.department_id;
	
 #18   
SELECT first_name, last_name, department_id
FROM employees AS e
WHERE e.salary > (SELECT AVG(salary) FROM employees
					WHERE department_id = e.department_id )
GROUP BY department_id, employee_id
ORDER BY e.department_id LIMIT 10;

#19
SELECT department_id, SUM(salary) AS total_salary
FROM `employees`
group by department_id
ORDER BY department_id;


